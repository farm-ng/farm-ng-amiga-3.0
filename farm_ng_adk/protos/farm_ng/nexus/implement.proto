syntax = "proto3";

package farm_ng.nexus;

message ImplementRequest {
  ImplementState command = 1;
}

message ImplementState {
  repeated ToolRequest tools = 1;
}

message ToolRequest {
  uint32 id = 1;
  ToolState target_state = 2;
}

message ToolState {
  EnabledKind enabled_kind = 1;
  oneof kind {
    PolarToolState polar = 2;
    LinearToolState linear = 3;
    SwitchToolState switch = 4;
    RotaryToolState rotary = 5;
    RateToolState rate = 6;
  }
}

enum EnabledKind {
  UNSPECIFIED_KIND = 0;
  IMPLEMENT_ENABLED = 1;
  IMPLEMENT_DISABLED = 2;
}

// A switch tool state is a tool state that is either on or off.
message SwitchToolState { }

// A linear tool state is a tool state that has a position (e.g., linear actuator with encoder).
message LinearToolState {
  double position = 1;
}

// A polar tool state is a tool state that has two distinct states, A and B, and an associated timeout to reach either of those states.
message PolarToolState {
  PolarToolStateKind kind = 1;
  double timeout = 2;
}

enum PolarToolStateKind {
  UNSPECIFIED_POLAR_TOOL_STATE = 0;
  A = 1;
  B = 2;
}

// A rotary tool state is a tool state that has an angular velocity (e.g., a PTO).
message RotaryToolState {
  double angular_velocity = 1;
}

// A rate tool state is a tool state that has a rate (e.g., a bug spreader).
message RateToolState {
  double rate = 1;
}

message ImplementFeedback {
  repeated ToolFeedback tools = 1;
}

message ToolFeedback {
  uint32 id = 1;
  ToolState state = 2;
  ToolError error = 3;
}
message ToolError {
  string message = 1;
  ToolCANError can_error = 2;
}

message ToolCANError {
  oneof tool_error_kind {
    HBridgeFaultCode h_bridge_fault_code = 1;
    PtoFaultCode pto_fault_code = 2;
  }
}

// HBridgeFaultCode defines the possible fault codes for an HBridge.
enum HBridgeFaultCode {
  H_BRIDGE_FAULT_CODE_UNKNOWN_FAULT = 0; // Default value, indicating unknown fault
  H_BRIDGE_FAULT_CODE_SHORT_CIRCUIT_FORWARD = 1; // Short circuit in forward direction
  H_BRIDGE_FAULT_CODE_SHORT_CIRCUIT_REVERSE = 2; // Short circuit in reverse direction
  H_BRIDGE_FAULT_CODE_OVERCURRENT_FORWARD = 3; // Overcurrent in forward direction
  H_BRIDGE_FAULT_CODE_OVERCURRENT_REVERSE = 4; // Overcurrent in reverse direction
  H_BRIDGE_FAULT_CODE_INRUSH_OVERCURRENT_FORWARD = 5; // Inrush overcurrent in forward direction
  H_BRIDGE_FAULT_CODE_INRUSH_OVERCURRENT_REVERSE = 6; // Inrush overcurrent in reverse direction
  H_BRIDGE_FAULT_CODE_BATTERY_OVERVOLTAGE = 7; // Battery overvoltage
  H_BRIDGE_FAULT_CODE_BATTERY_UNDERVOLTAGE = 8; // Battery undervoltage
  H_BRIDGE_FAULT_CODE_OVER_TEMPERATURE = 9; // Over temperature
  H_BRIDGE_FAULT_CODE_OUTPUT_INCORRECT_STATE = 16; // Output is not correct state (16 == 0x10)
  H_BRIDGE_FAULT_CODE_COMMUNICATION_LOSS = 17; // Communication Loss (17 == 0x11)
}

// PtoFaultCode defines the possible fault codes for a PTO.
enum PtoFaultCode {
  PTO_UNKNOWN_FAULT = 0; // Default value, indicating unknown fault
}